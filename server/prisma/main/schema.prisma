// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/prisma/client/main"
}

datasource db {
  provider = "mysql"
  url      = env("MAIN_DATABASE_URL")
  shadowDatabaseUrl = env("MAIN_SHADOW_DATABASE_URL")
}


model Restaurant{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String
  email String @unique
  password String
  address Address?
  currencyId Int
  settings Settings?
  tasks Task[]
  openingHours OpeningHour[]
  waiters Waiter[]
  orders Order[]
  products Product[]
  categories Category[]
  tables Table[]
  meals Meal[]
}

model Settings{
  id Int @unique @default(autoincrement())
  createdAt DateTime @default(now())
  enableAnalytics Boolean @default(false)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int @unique
}


model Address{
  id Int @unique @id @default(autoincrement())
  country String
  zip String
  city String
  address1 String
  address2 String?
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int @unique
}


model Task {
 id Int @id @default(autoincrement())
 done Boolean @default(false)
 baseId Int
 restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
restaurantId Int
}

model Waiter{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  email String @unique
  name String
  gender String
  profileIcon String?
  password String
  orders Order[]
  meals Meal[]
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
}

model Order{
  id Int @unique @id @default(autoincrement())
  description String? @default("")
  createdAt DateTime @default(now())
  isReady Boolean @default(false)
  closed Boolean @default(false)
  quantity Int @default(1)
  waiter Waiter @relation(fields: [waiterId], references: [id])
  table Table? @relation(fields: [tableId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  meal Meal? @relation(fields: [mealId], references: [id], onDelete: SetNull)
  mealId Int? 
  productId Int
  restaurantId Int
  tableId Int?
  waiterId Int
}

model Product{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orders Order[]
  price Float
  restaurantId Int
  categoryId Int?
}
model Category{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String
  products Product[]
  parent Category? @relation("ParentToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  parentId Int?
  root Boolean @default(true)
  level Int @default(1)
  subCategories Category[] @relation("ParentToCategory")
}
model Table{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String
  orders Order[]
  restaurantId Int
  meals Meal[]
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Meal{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  start DateTime
  end DateTime
  total Float
  orders Order[]
  waiter Waiter? @relation(fields: [waiterId], references: [id], onDelete: SetNull)
  table Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  waiterId Int?
  tableId Int?
}

model OpeningHour{
  id Int @unique @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String 
  start String
  end String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
}