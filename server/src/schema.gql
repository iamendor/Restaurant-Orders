# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  address1: String!
  address2: String
  city: String!
  country: String!
  id: Float!
  restaurant: Restaurant!
  restaurantId: Float!
  zip: String!
}

type AuthRestaurant {
  access_token: String!
  restaurant: Restaurant!
}

type AuthWaiter {
  access_token: String!
  waiter: Waiter!
}

type Category {
  id: Float!
  name: String!
  restaurant: Restaurant!
  restaurantId: Float!
  victuals: [Victual!]!
}

input CreateAddress {
  address1: String!
  address2: String
  city: String!
  country: String!
  zip: String!
}

input CreateCategory {
  name: String!
}

input CreateCurrency {
  currency: String!
}

input CreateMeal {
  tableId: Float!
}

input CreateOrder {
  description: String
  isReady: Boolean
  restaurantId: Float
  tableId: Float!
  victualId: Float!
  waiterId: Float
}

input CreateRestaurant {
  address: CreateAddress!
  currency: CreateCurrency!
  email: String!
  name: String!
  password: String!
}

input CreateTable {
  name: String!
}

input CreateVictual {
  categoryId: Float!
  name: String!
  price: Float!
}

input CreateWaiter {
  email: String!
  gender: String!
  name: String!
  password: String!
  profileIcon: String
}

type Currency {
  currency: String!
  id: Float!
  meals: [Meal!]!
  restaurant: Restaurant!
  restaurantId: Float!
}

scalar Date

input LoginRestaurant {
  email: String!
  password: String!
}

input LoginWaiter {
  email: String!
  password: String!
}

type Meal {
  currency: Currency!
  end: Date!
  id: Float!
  orders: [Order!]!
  restaurant: Restaurant!
  restaurantId: Float!
  start: Date!
  table: Table!
  total: Float!
  waiter: Waiter!
}

type Mutation {
  createCategories(data: [CreateCategory!]!): Success!
  createCategory(data: CreateCategory!): Category!
  createMeal(data: CreateMeal!): Meal!
  createOrder(data: CreateOrder!): Order!
  createOrders(data: [CreateOrder!]!): Success!
  createTable(data: CreateTable!): Table!
  createTables(data: [CreateTable!]!): Success!
  createVictual(data: CreateVictual!): Victual!
  createVictuals(data: [CreateVictual!]!): Success!
  createWaiter(data: CreateWaiter!): Waiter!
  deleteCategory(where: WhereCategory!): Success!
  deleteMeal(where: WhereMeal!): Success!
  deleteOrder(where: WhereOrder!): Success!
  deleteRestaurant: Success!
  deleteTable(where: WhereTable!): Success!
  deleteVictual(where: WhereVictual!): Success!
  deleteWaiter(where: WhereWaiter!): Success!
  loginRestaurant(credentials: LoginRestaurant!): AuthRestaurant!
  loginWaiter(credentials: LoginWaiter!): AuthWaiter!
  signup(data: CreateRestaurant!): Restaurant!
  updateCategory(data: UpdateCategory!): Category!
  updateOrder(data: UpdateOrder!): Order!
  updateRestaurant(update: UpdateRestaurant!): Restaurant!
  updateRestaurantPassword(update: UpdateRestaurantPassword!): Success!
  updateTable(data: UpdateTable!): Table!
  updateVictual(data: UpdateVictual!): Victual!
  updateWaiter(data: UpdateWaiter!): Waiter!
  updateWaiterPassword(data: UpdateWaiterPassword!): Success!
}

type Order {
  createdAt: Date!
  description: String!
  id: Float!
  isReady: Boolean!
  restaurant: Restaurant!
  table: Table!
  victual: Victual!
  waiter: Waiter!
}

type Query {
  categories: [Category!]!
  category(where: WhereCategory!): Category!
  meal(where: WhereMeal!): Meal!
  meals: [Meal!]!
  order(where: WhereOrder!): Order!
  orders: [Order!]!
  restaurantInfo: Restaurant!
  table(where: WhereTable!): Table!
  tables: [Table!]!
  victual(where: WhereVictual!): Victual!
  victuals: [Victual!]!
  waiterInfo(where: WhereWaiter): Waiter!
  waiters: [Waiter!]!
}

type Restaurant {
  address: Address!
  categories: [Category!]!
  createdAt: Date!
  currency: Currency!
  email: String!
  id: Float!
  meals: [Meal!]!
  name: String!
  orders: [Order!]!
  tables: [Table!]!
  victuals: [Victual!]!
  waiters: [Waiter!]!
}

type Subscription {
  listenOrder(where: WhereOrder!): Order!
  listenOrders: [Order!]!
}

type Success {
  message: String!
}

type Table {
  id: Float!
  name: String!
  orders: [Order!]!
  restaurant: Restaurant!
  restaurantId: Float!
}

input UpdateAddress {
  address1: String!
  address2: String!
  city: String!
  country: String!
  zip: String!
}

input UpdateCategory {
  update: UpdateCategoryData!
  where: WhereCategory!
}

input UpdateCategoryData {
  name: String
}

input UpdateCurrency {
  currency: String!
}

input UpdateOrder {
  update: UpdateOrderData!
  where: WhereOrder!
}

input UpdateOrderData {
  description: String
  isReady: Boolean
  tableId: Float
  victualId: Float
}

input UpdateRestaurant {
  address: UpdateAddress
  currency: UpdateCurrency
  email: String
  name: String
}

input UpdateRestaurantPassword {
  old: String!
  password: String!
}

input UpdateTable {
  update: UpdateTableData!
  where: WhereTable!
}

input UpdateTableData {
  name: String
}

input UpdateVictual {
  update: UpdateVictualData!
  where: WhereVictual!
}

input UpdateVictualData {
  categoryId: Float
  name: String
  price: Float
}

input UpdateWaiter {
  update: UpdateWaiterData!
  where: WhereWaiter
}

input UpdateWaiterData {
  email: String
  gender: String
  name: String
  profileIcon: String
}

input UpdateWaiterPassword {
  update: UpdateWaiterPasswordData!
  where: WhereWaiter
}

input UpdateWaiterPasswordData {
  old: String
  password: String!
}

type Victual {
  category: Category!
  id: Float!
  name: String!
  orders: [Order!]!
  price: Float!
  restaurant: Category!
  restaurantId: Float!
}

type Waiter {
  createdAt: Date!
  email: String!
  gender: String!
  id: Float!
  meals: [Meal!]!
  name: String!
  orders: [Order!]!
  profileIcon: String
  restaurant: Restaurant!
  restaurantId: Float!
}

input WhereCategory {
  id: Float!
}

input WhereMeal {
  id: Float!
  restaurantId: Float
}

input WhereOrder {
  id: Float!
}

input WhereTable {
  id: Float
}

input WhereVictual {
  id: Float!
}

input WhereWaiter {
  email: String
  id: Float
  restaurantId: Float
}