type Mutation {
  """
  Restaurant operations
  """
  signup(data: CreateRestaurant!): Restaurant
  loginRestaurant(credentials: LoginRestaurant!): AuthRestaurant
  updateRestaurant(update: UpdateRestaurant!): Restaurant
  deleteRestaurant: Deleted
  updateRestaurantPassword(update: UpdateRestaurantPassword!): PasswordUpdated
  """
  Waiter opearations
  """
  createWaiter(data: CreateWaiter!): Waiter
  updateWaiter(data: UpdateWaiter!): Waiter
  deleteWaiter(where: WhereWaiter!): Deleted
  updateWaiterPassword(data: UpdateWaiterPassword): PasswordUpdated
  loginWaiter(credentials: LoginWaiter!): AuthWaiter
  """
  Table operations
  """
  createTable(data: CreateTable!): Table
  createTables(data: [CreateTable]): TablesCreated
  updateTable(data: UpdateTable!): Table
  deleteTable(where: WhereTable!): Deleted
  """
  Category operations
  """
  createCategory(data: CreateCategory!): Category
  createCategories(data: [CreateCategory!]): CategoriesCreated
  updateCategory(data: UpdateCategory!): Category
  deleteCategory(where: WhereCategory!): Deleted
  """
  Meal operations
  """
  createMeal(data: CreateMeal!): Meal
  createMeals(data: [CreateMeals!]): MealsCreated
  updateMeal(data: UpdateMeal!): Meal
  deleteMeal(where: WhereMeal!): Deleted
  """
  Order operations
  """
  createOrder(data: CreateOrder!): Order
  createOrders(data: [CreateOrder!]): OrdersCreated
  updateOrder(data: UpdateOrder!): Order
  deleteOrder(where: WhereOrder!): Deleted
}

type Query {
  waiters: [Waiter]
  restaurantInfo: Restaurant
  restaurant: Restaurant
  waiterInfo(where: WhereWaiter): Waiter
  address: Address
  tables: [Table]
  table(where: WhereTable!): Table
  categories: [Category]
  category(where: WhereCategory!): Category
  meals: [Meal]
  meal(where: WhereMeal!): Meal
  orders: [Order]
  order(where: WhereOrder!): Order
}

schema {
  mutation: Mutation
  query: Query
}

"""
Models
"""
type RestaurantModel {
  id: Int!
  name: String!
  email: String!
  password: String!
  address: Address
  waiters: [Waiter]
  orders: [Order]
  meals: [Meal]
  categories: [Category]
  tables: [Table]
}

type Address {
  id: Int!
  country: String!
  zip: String!
  city: String!
  address1: String!
  address2: String!
  restaurant: Restaurant
}

type WaiterModel {
  id: Int!
  name: String!
  email: String!
  gender: String!
  profileIcon: String
  password: String!
  orders: [Order]
  restaurant: Restaurant
}

type Order {
  id: Int!
  description: String!
  createdAt: String!
  isReady: Boolean!
  waiter: Waiter
  table: Table
  restaurant: Restaurant
  meal: Meal
}

type Meal {
  id: Int!
  name: String!
  price: Float!
  restaurant: Restaurant
  category: Category
  orders: [Order]
}

type Category {
  id: Int!
  name: String!
  meals: [Meal]
  restaurant: Restaurant
}

type Table {
  id: Int!
  name: String!
  orders: [Order]
  restaurant: Restaurant
}

"""
Restaurant Dto
"""
input CreateRestaurant {
  name: String!
  email: String!
  password: String!
  address: CreateAddress!
}

input LoginRestaurant {
  email: String!
  password: String!
}
input WhereRestaurant {
  id: Int
  email: String
}
input UpdateRestaurantData {
  where: WhereRestaurant!
  data: UpdateRestaurant!
}
input UpdateRestaurant {
  name: String
  address: UpdateAddress
}

input UpdateRestaurantDataPassword {
  where: WhereRestaurant!
  update: UpdateRestaurantPassword!
}

input UpdateRestaurantPassword {
  old: String!
  password: String!
}

"""
Restaurant Response
"""
type AuthRestaurant {
  restaurant: Restaurant!
  access_token: String!
}

type Restaurant {
  id: Int!
  name: String!
  email: String!
  address: Address
  waiters: [Waiter]
  orders: [Order]
  meals: [Meal]
  categories: [Category]
  tables: [Table]
}

"""
Address Input
"""
input CreateAddress {
  country: String!
  zip: String!
  city: String!
  address1: String!
  address2: String
}

input UpdateAddress {
  country: String
  zip: String
  city: String
  address1: String
  address2: String
}

input WhereAddress {
  id: Int
  restaurantId: Int
}

"""
Waiter Dto
"""
input CreateWaiterData {
  restaurantId: Int!
  data: CreateWaiter!
}

input WhereWaiter {
  id: Int
  email: String
  restaurantId: Int
}

input CreateWaiter {
  name: String!
  email: String!
  gender: String!
  profileIcon: String
  password: String!
}

input UpdateWaiterData {
  name: String
  gender: String
  email: String
  profileIcon: String
}

input UpdateWaiter {
  where: WhereWaiter
  update: UpdateWaiterData!
  role: String
}

input UpdateWaiterPassword {
  where: WhereWaiter
  update: UpdateWaiterDataPassword!
  role: String
}

input UpdateWaiterDataPassword {
  password: String!
  old: String
}

input LoginWaiter {
  email: String!
  password: String!
}

"""
Waiter Response
"""
type Waiter {
  id: Int!
  name: String!
  email: String!
  gender: String!
  profileIcon: String
  orders: [Order]
  restaurant: Restaurant
}

type AuthWaiter {
  access_token: String!
  waiter: Waiter!
}

"""
Table Dto
"""
input CreateTable {
  name: String!
}

input CreateTableData {
  name: String!
  restaurantId: Int!
}

input UpdateTable {
  where: WhereTable!
  update: UpdateTableData!
}

input UpdateTableData {
  name: String
}

input WhereTable {
  id: Int!
  restaurantId: Int
}

"""
Table Response
"""
type TablesCreated {
  message: String!
}

"""
Category Dto
"""
input CreateCategory {
  name: String!
}

input CreateCategoryData {
  name: String!
  restaurantId: Int!
}

input UpdateCategory {
  where: WhereCategory!
  update: UpdateCategoryData!
}

input UpdateCategoryData {
  name: String
}

input WhereCategory {
  id: Int!
  restaurantId: Int
}

"""
Category Response
"""
type CategoriesCreated {
  message: String!
}

"""
Meal Dto
"""
input CreateMeal {
  name: String!
  price: Float!
  categoryId: Int
  category: CreateCategory
}

input CreateMealData {
  name: String!
  price: Float!
  restaurantId: Int!
  categoryId: Int
  category: CreateCategory
}

input CreateMeals {
  name: String!
  price: Float!
  restaurantId: Int
  categoryId: Int!
}

input UpdateMeal {
  where: WhereMeal!
  update: UpdateMealData!
}
input UpdateMealData {
  name: String
  price: Float
  categoryId: Int
}

input WhereMeal {
  id: Int!
  restaurantId: Int
}

"""
Meal Response
"""
type MealsCreated {
  message: String!
}

"""
Order Dto
"""
input CreateOrder {
  description: String
  isReady: Boolean = false
  waiterId: Int
  tableId: Int!
  mealId: Int!
  restaurantId: Int
}

input WhereOrder {
  id: Int!
  restaurantId: Int
}

input UpdateOrder {
  where: WhereOrder!
  update: UpdateOrderData!
}

input UpdateOrderData {
  description: String
  isReady: Boolean
  tableId: Int
  mealId: Int
}

"""
Order Response
"""
type OrdersCreated {
  message: String!
}

"""
Others
"""
type JwtPayload {
  name: String!
  sub: Int!
  role: String!
  id: Int!
  email: String!
}

type Deleted {
  message: String!
}

type PasswordUpdated {
  message: String!
}
