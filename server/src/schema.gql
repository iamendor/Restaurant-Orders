type Mutation {
  """
  Restaurant operations
  """
  signup(data: CreateRestaurant!): AuthRestaurant
  loginRestaurant(credentials: LoginRestaurant!): AuthRestaurant
  updateRestaurant(update: UpdateRestaurantData!): AuthRestaurant
  deleteRestaurant: Deleted
  updateRestaurantPassword(
    update: UpdateRestaurantDataPassword!
  ): RestaurantPasswordUpdated
  """
  Waiter opearations
  """
  createWaiter(data: CreateWaiterData!): WaiterResponse
  updateWaiter(data: UpdateWaiter!): WaiterResponse!
  deleteWaiter(where: WhereWaiter!): Deleted
}

type Query {
  waiters: [WaiterResponse]
}

schema {
  mutation: Mutation
  query: Query
}

"""
Models
"""
type Restaurant {
  id: Int!
  name: String!
  password: String!
  address: Address
  waiters: [Waiter]
  orders: [Order]
  meals: [Meal]
  categories: [Category]
  tables: [Table]
}

type Address {
  id: Int!
  country: String!
  zip: String!
  city: String!
  address1: String!
  address2: String!
  restaurant: Restaurant
}

type Waiter {
  id: Int!
  name: String!
  gender: String!
  profileIcon: String
  password: String!
  orders: [Order]
  restaurant: Restaurant
}

type Order {
  id: Int!
  description: String!
  createdAt: String!
  isReady: Boolean!
  waiter: Waiter!
  table: Table!
  restaurant: Restaurant!
  meal: Meal!
}

type Meal {
  id: Int!
  name: String!
  price: Float!
  restaurant: Restaurant!
  category: Category
  orders: [Order]
}

type Category {
  id: Int!
  name: String!
  meal: [Meal]
  restaurant: Restaurant!
}

type Table {
  id: Int!
  name: String!
  orders: [Order]
  restaurant: Restaurant!
}

"""
Restaurant Dto
"""
input CreateRestaurant {
  name: String!
  password: String!
  address: CreateAddress!
}

input LoginRestaurant {
  name: String!
  password: String!
}
input WhereRestaurant {
  id: Int
  name: String
}
input UpdateRestaurant {
  where: WhereRestaurant!
  data: UpdateRestaurantData!
}
input UpdateRestaurantData {
  name: String
  password: String
  address: UpdateAddress
}

input UpdateRestaurantPassword {
  where: WhereRestaurant!
  update: UpdateRestaurantDataPassword!
}

input UpdateRestaurantDataPassword {
  old: String!
  password: String!
}

"""
Restaurant Response
"""
type AuthRestaurant {
  restaurant: RestaurantResponse!
  access_token: String!
}

type RestaurantResponse {
  id: Int!
  name: String!
  address: Address
  waiters: [Waiter]
  orders: [Order]
  meals: [Meal]
  categories: [Category]
  tables: [Table]
}

type RestaurantPasswordUpdated {
  message: String!
}

"""
Address Input
"""
input CreateAddress {
  country: String!
  zip: String!
  city: String!
  address1: String!
  address2: String
}

input UpdateAddress {
  country: String
  zip: String
  city: String
  address1: String
  address2: String
}

"""
Waiter Dto
"""
input CreateWaiter {
  restaurantId: Int!
  data: CreateWaiterData!
}

input WhereWaiter {
  id: Int!
  restaurant: Int
}

input CreateWaiterData {
  name: String!
  gender: String!
  profileIcon: String
  password: String!
}

input UpdateWaiterData {
  name: String
  gender: String
  profileIcon: String
}

input UpdateWaiter {
  where: WhereWaiter!
  update: UpdateWaiterData!
}

"""
Waiter Response
"""
type WaiterResponse {
  id: Int!
  name: String!
  gender: String!
  profileIcon: String
  orders: [Order]
  restaurant: Restaurant
}

"""
Others
"""
type JwtPayload {
  name: String!
  sub: Int!
  role: String!
  id: Int!
}

type Deleted {
  message: String!
}
